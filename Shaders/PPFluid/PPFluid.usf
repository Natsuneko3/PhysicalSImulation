#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ShaderPrint.ush"
#include "/Engine/Private/SceneTexturesCommon.ush"
#include "../FluidCommon.ush"

#define G 98
int FluidShaderType;
int DownScale;
float3 WorldVelocity;
float3 WorldPosition;
int bUseFFTPressure;

Texture2D<float4> InTexture;
Texture2D TranslucencyTexture;
SamplerState InTextureSampler;
RWTexture2D<float3> FluidColorUAV;
void Advection(uint2 DispatchThreadId : SV_DispatchThreadID, uint2 GroupThreadId)
{

	//float2 UV = SvPositionToBufferUV(float4(DispatchThreadId + 0.5,0,0));
	float2 UV = float2(DispatchThreadId + 0.5) / GridSize.xy;//SvPositionToBufferUV(float4(DispatchThreadId+0.5,0,0) * DownScale);
	float DeviceZ = LookupDeviceZ(UV);
	float2 ScreenPosition = ViewportUVToScreenPos(UV);
	float4 ThisClip = float4(ScreenPosition, DeviceZ, 1);
	float4 PrevClip = mul(ThisClip, View.ClipToPrevClip);
	float2 PrevScreen = PrevClip.xy / PrevClip.w;

	float2 BackN = ScreenPosition - PrevScreen;
	float2 PreVelocity = float2(BackN.x, -BackN.y) *0.5;

	float4 SimValue = SimGridSRV.SampleLevel(SimSampler, UV, 0);//.Load(int3(DispatchThreadId, 0));
	float2 ReadIndex = float2(DispatchThreadId + 0.5) - SimValue.xy * (dt / dx);
	float4 Advection = SimGridSRV.SampleLevel(SimSampler, ReadIndex / GridSize.xy, 0);

	float3 FluidColor = FluidColorUAV[ReadIndex - PreVelocity * GridSize.xy];
	float3 FluidColor1 = FluidColorUAV[ReadIndex - uint2(1,1)];
	float3 FluidColor2 = FluidColorUAV[ReadIndex+uint2(1,1)];

	SimValue.x = clamp(Advection.x / (dt * VelocityDissipate + 1) - dt * 0.1 * VelocityDissipate, -1000, 1000);
	SimValue.y = clamp(Advection.y / (dt * VelocityDissipate + 1) - dt * 0.1 * VelocityDissipate, -1000, 1000);
	SimValue.z = clamp(Advection.z / (dt * DensityDissipate + 1) - dt * 0.1 * DensityDissipate, 0, 100);
	SimGridUAV[DispatchThreadId] = SimValue;
	FluidColorUAV[DispatchThreadId] = FluidColor;//float3(FluidColor.r,FluidColor1.g,FluidColor2.b);

}

void PreVelocity(uint2 DispatchThreadId : SV_DispatchThreadID, uint2 GroupThreadId : SV_GroupThreadID)
{

	float2 ViewportUV = float2(DispatchThreadId+0.5) / GridSize.xy;//SvPositionToBufferUV(float4(DispatchThreadId+0.5,0,0) * DownScale);
	float DeviceZ = LookupDeviceZ(ViewportUV);
	float2 ScreenPosition = ViewportUVToScreenPos(ViewportUV);
	float4 ThisClip = float4(ScreenPosition, DeviceZ, 1);
	float4 PrevClip = mul(ThisClip, View.ClipToPrevClip);
	float2 PrevScreen = PrevClip.xy / PrevClip.w;

	float2 BackN = ScreenPosition - PrevScreen;
	float2 PreVelocity = float2(BackN.x, -BackN.y) *0.5;
	float4 SimValue = SimGridSRV.SampleLevel(SimSampler,ViewportUV - PreVelocity,0);//.Load(int3(ViewportUV + MotionVector * 10, 0));

	float2 Velocity = SimValue.xy;
	float Density = SimValue.z;
	float2 Force = 0;
	float Boundary = 0;

	float noiseScale = .05 * NoiseFrequency;
	float noiseIntensity = NoiseIntensity;
	float noiseX = simplex3d(float3(DispatchThreadId.xy, Time * 0.1) * noiseScale);
	float noiseY = simplex3d(float3(DispatchThreadId.xy, Time * 0.05) * noiseScale);
	float3 noise = float3(noiseX,noiseY,1) ;//(NoiseTileWrap(float3(DispatchThreadId.xy, Time * 0.1),true,1) - 0.5 )* 2.0;//(simplex3d(float3(DispatchThreadId.xy, Time * 0.1) ) - 0.5 );
	float4 NoiseTexture = InTexture.SampleLevel(InTextureSampler,ViewportUV * NoiseFrequency*2.f,0);//simplex3d(float3(DispatchThreadId.xy, Time * 0.1) * noiseScale);

	uint Stenlic = SceneTexturesStruct.CustomStencilTexture.Load(uint3(DispatchThreadId * DownScale, 0)) STENCIL_COMPONENT_SWIZZLE;//CalcSceneCustomStencil(DispatchThreadId / DownScale);
	if (Stenlic == 1u)
	{
		Density = 1;//+= saturate(noiseX)*0.1; //RandFast(DispatchThreadId*0.2,Time);
		Velocity = noise * NoiseIntensity;//float2(noiseX * 100, - noiseY * 300);
		float Dispersion = Texture2DSample(SceneTexturesStruct.SceneColorTexture, InTextureSampler,ViewportUV - PreVelocity + float2(10,0) * View.ViewSizeAndInvSize.zw).r;
		//CalcSceneColor(ViewportUV - PreVelocity + float2(10,0) * View.ViewSizeAndInvSize.zw).r;
		float Dispersion1 = Texture2DSample(SceneTexturesStruct.SceneColorTexture, InTextureSampler,ViewportUV - PreVelocity ).g;
		//CalcSceneColor(ViewportUV - PreVelocity ).g;
		float Dispersion2 = Texture2DSample(SceneTexturesStruct.SceneColorTexture, InTextureSampler,ViewportUV - PreVelocity - float2(10,0) * View.ViewSizeAndInvSize.zw).b;
		float3 Translucency =  TranslucencyTexture.SampleLevel(InTextureSampler,ViewportUV - PreVelocity,0).xyz;
		FluidColorUAV[DispatchThreadId] = Translucency + max(float3(Dispersion,Dispersion1,Dispersion2), NoiseTexture.xyz*0.5);//
	}

	float2 Grad = GetGradient(SimGridSRV, int2(DispatchThreadId), dx);
	float GradCurlLength = length(Grad);

	if (GradCurlLength > 1e-5)
	{
		Force += cross(float3(Grad / GradCurlLength, 0), float3(0, 0, 1)).xy;//VorticityMult * dx * Grad / GradCurlLength; //
	}

	Force += float2(G,0.5 * -G) * Density * GravityScale * 0.025;

	Force += noise.xy * noiseIntensity;
	Force -= WorldVelocity.xz * float2(-1, 1) * Density * 0.5;
	Velocity += Force * dt;

	SimGridUAV[DispatchThreadId] = float4(Velocity.x, Velocity.y, Density, Boundary);
}

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID, uint2 GroupThreadId : SV_GroupThreadID, uint2 GroupID:SV_GroupID)
{

	switch (FluidShaderType)
	{
	case PREVELOCITY:
		PreVelocity(DispatchThreadId, GroupThreadId);
		break;

	case ADVECTION:
		Advection(DispatchThreadId, GroupThreadId);

		break;
	}
}
