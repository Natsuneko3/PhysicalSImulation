// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	FilterPixelShader.usf: Filter pixel shader source.
=============================================================================*/

#define SCENE_TEXTURES_DISABLED 1

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"
#include "/Engine/Private/PostProcessCommon.ush"

#ifndef STATIC_SAMPLE_COUNT
	#error STATIC_SAMPLE_COUNT is undefined
#endif

#ifndef SAMPLE_COUNT_MAX
	#error SAMPLE_COUNT_MAX is undefined
#endif

#if STATIC_SAMPLE_COUNT > SAMPLE_COUNT_MAX
#error STATIC_SAMPLE_COUNT cannot be greater than SAMPLE_COUNT_MAX
#endif

#define PACKED_STATIC_SAMPLE_COUNT ((STATIC_SAMPLE_COUNT + 1) / 2)
#define PACKED_SAMPLE_COUNT_MAX ((SAMPLE_COUNT_MAX + 1) / 2)

#define USE_UNPACKED_UVS (ES3_1_PROFILE)
#define USE_DYNAMIC_LOOP (STATIC_SAMPLE_COUNT == 0)

SCREEN_PASS_TEXTURE_VIEWPORT(Filter)


float2 Circle(float Start, float Points, float Point)
{
	float Rad = (3.141592 * 2.0 * (1.0 / Points)) * (Point + Start);
	return float2(sin(Rad), cos(Rad));
}

Texture2D BloomUpSourceATexture;
SamplerState BloomUpSourceASampler;

Texture2D BloomUpSourceBTexture;
SamplerState BloomUpSourceBSampler;

float4 BufferASizeAndInvSize;
float4 BufferBSizeAndInvSize;
float2 BloomUpScales;

void BloomUpVS_Mobile(
	in float4 InPosition : ATTRIBUTE0,
	in float2 InTexCoord : ATTRIBUTE1,
	out float4 OutTexCoords[8] : TEXCOORD0,
	out float4 OutPosition : SV_POSITION
	)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, InTexCoord);

	float Start;
	float Scale;

	Start = 2.0/7.0;
	Scale = BloomUpScales.x;


	OutTexCoords[0].xy = InTexCoord.xy + Circle(Start, 7.0, 0.0) * Scale * BufferASizeAndInvSize.zw;
	OutTexCoords[0].zw = InTexCoord.xy + Circle(Start, 7.0, 1.0) * Scale * BufferASizeAndInvSize.zw;
	OutTexCoords[1].xy = InTexCoord.xy + Circle(Start, 7.0, 2.0) * Scale * BufferASizeAndInvSize.zw;
	OutTexCoords[1].zw = InTexCoord.xy + Circle(Start, 7.0, 3.0) * Scale * BufferASizeAndInvSize.zw;
	OutTexCoords[2].xy = InTexCoord.xy + Circle(Start, 7.0, 4.0) * Scale * BufferASizeAndInvSize.zw;
	OutTexCoords[2].zw = InTexCoord.xy + Circle(Start, 7.0, 5.0) * Scale * BufferASizeAndInvSize.zw;
	OutTexCoords[3].xy = InTexCoord.xy + Circle(Start, 7.0, 6.0) * Scale * BufferASizeAndInvSize.zw;

	OutTexCoords[3].zw = InTexCoord.xy;

	Start = 2.0/7.0;
	Scale = BloomUpScales.y;

	OutTexCoords[4].xy = InTexCoord.xy + Circle(Start, 7.0, 0.0) * Scale * BufferBSizeAndInvSize.zw;
	OutTexCoords[4].zw = InTexCoord.xy + Circle(Start, 7.0, 1.0) * Scale * BufferBSizeAndInvSize.zw;
	OutTexCoords[5].xy = InTexCoord.xy + Circle(Start, 7.0, 2.0) * Scale * BufferBSizeAndInvSize.zw;
	OutTexCoords[5].zw = InTexCoord.xy + Circle(Start, 7.0, 3.0) * Scale * BufferBSizeAndInvSize.zw;
	OutTexCoords[6].xy = InTexCoord.xy + Circle(Start, 7.0, 4.0) * Scale * BufferBSizeAndInvSize.zw;
	OutTexCoords[6].zw = InTexCoord.xy + Circle(Start, 7.0, 5.0) * Scale * BufferBSizeAndInvSize.zw;
	OutTexCoords[7].xy = InTexCoord.xy + Circle(Start, 7.0, 6.0) * Scale * BufferBSizeAndInvSize.zw;
	OutTexCoords[7].zw = float2(0.0, 0.0);
}

float4 BloomTintA;
float4 BloomTintB;

void BloomUpPS_Mobile(
	float4 InUVs[8] : TEXCOORD0,
	out HALF4_TYPE OutColor : SV_Target0
	)
{
	half3 A0 = BloomUpSourceATexture.Sample(BloomUpSourceASampler, InUVs[0].xy).rgb;
	half3 A1 = BloomUpSourceATexture.Sample(BloomUpSourceASampler, InUVs[0].zw).rgb;
	half3 A2 = BloomUpSourceATexture.Sample(BloomUpSourceASampler, InUVs[1].xy).rgb;
	half3 A3 = BloomUpSourceATexture.Sample(BloomUpSourceASampler, InUVs[1].zw).rgb;
	half3 A4 = BloomUpSourceATexture.Sample(BloomUpSourceASampler, InUVs[2].xy).rgb;
	half3 A5 = BloomUpSourceATexture.Sample(BloomUpSourceASampler, InUVs[2].zw).rgb;
	half3 A6 = BloomUpSourceATexture.Sample(BloomUpSourceASampler, InUVs[3].xy).rgb;
	half3 A7 = BloomUpSourceATexture.Sample(BloomUpSourceASampler, InUVs[3].zw).rgb;

	half3 B0 = BloomUpSourceBTexture.Sample(BloomUpSourceBSampler, InUVs[3].zw).rgb;
	half3 B1 = BloomUpSourceBTexture.Sample(BloomUpSourceBSampler, InUVs[4].xy).rgb;
	half3 B2 = BloomUpSourceBTexture.Sample(BloomUpSourceBSampler, InUVs[4].zw).rgb;
	half3 B3 = BloomUpSourceBTexture.Sample(BloomUpSourceBSampler, InUVs[5].xy).rgb;
	half3 B4 = BloomUpSourceBTexture.Sample(BloomUpSourceBSampler, InUVs[5].zw).rgb;
	half3 B5 = BloomUpSourceBTexture.Sample(BloomUpSourceBSampler, InUVs[6].xy).rgb;
	half3 B6 = BloomUpSourceBTexture.Sample(BloomUpSourceBSampler, InUVs[6].zw).rgb;
	half3 B7 = BloomUpSourceBTexture.Sample(BloomUpSourceBSampler, InUVs[7].xy).rgb;

	// A is the same size source.
	half3 WA = BloomTintA.rgb;
	// B is the upsampled source.
	half3 WB = BloomTintB.rgb;

	OutColor.rgb =
		A0 * WA +
		A1 * WA +
		A2 * WA +
		A3 * WA +
		A4 * WA +
		A5 * WA +
		A6 * WA +
		A7 * WA +
		B0 * WB +
		B1 * WB +
		B2 * WB +
		B3 * WB +
		B4 * WB +
		B5 * WB +
		B6 * WB +
		B7 * WB;
	OutColor.a = 0;
}

SamplerState Filter_Sampler;
Texture2D Filter_Texture;
float BloomLuminance;
float4 SampleFilterTexture(float2 UV)
{
#if USE_MANUAL_UV_BORDER
	float2 ClampedUV = clamp(UV, Filter_UVViewportBilinearMin, Filter_UVViewportBilinearMax);

	float4 Sample = Texture2DSampleLevel(Filter_Texture, Filter_Sampler, ClampedUV, 0);

	float2 TexelOffset = abs(ClampedUV - UV) * Filter_Extent;

	float2 BilinearWeight = saturate(1.0f - TexelOffset);

	return BilinearWeight.x * BilinearWeight.y * Sample;
#else
	return Texture2DSampleLevel(Filter_Texture, Filter_Sampler, UV, 0);
#endif
}

#if USE_COMBINE_ADDITIVE

SCREEN_PASS_TEXTURE_VIEWPORT(Additive)
SamplerState Additive_Sampler;
Texture2D Additive_Texture;

float4 SampleAdditiveTexture(float2 UV)
{
#if USE_MANUAL_UV_BORDER
	UV = clamp(UV, Additive_UVViewportBilinearMin, Additive_UVViewportBilinearMax);
#endif

	return Texture2DSampleLevel(Additive_Texture, Additive_Sampler, UV, 0);
}

#endif

#if USE_DYNAMIC_LOOP

FScreenTransform SvPositionToTextureUV;

float4 SampleOffsets[PACKED_SAMPLE_COUNT_MAX];
float4 SampleWeights[SAMPLE_COUNT_MAX];
int SampleCount;

void MainPS(
	float4 SvPosition : SV_POSITION,
	out float4 OutColor : SV_Target0)
{
	float2 InUV = ApplyScreenTransform(SvPosition.xy, SvPositionToTextureUV);

	float4 Color = 0;

	int SampleIndex = 0;

	LOOP for (; SampleIndex < SampleCount - 1; SampleIndex += 2)
	{
		float4 UVUV = InUV.xyxy + SampleOffsets[SampleIndex / 2];
		Color += SampleFilterTexture(UVUV.xy) * SampleWeights[SampleIndex + 0];
		Color += SampleFilterTexture(UVUV.zw) * SampleWeights[SampleIndex + 1];
	}

	BRANCH if (SampleIndex < SampleCount)
	{
		float2 UV = InUV + SampleOffsets[SampleIndex / 2].xy;
		Color += SampleFilterTexture(UV) * SampleWeights[SampleIndex + 0];
	}

#if USE_COMBINE_ADDITIVE
	Color += SampleAdditiveTexture(InUV);
#endif

	OutColor = Color ;// (Luminance(Color) + 1.f) * BloomLuminance;
}


#else // !USE_DYNAMIC_LOOP

float4 SampleOffsets[PACKED_STATIC_SAMPLE_COUNT];
float4 SampleWeights[STATIC_SAMPLE_COUNT];

void MainPS(
	noperspective float2 InUV : TEXCOORD0,
#if USE_UNPACKED_UVS
	noperspective float2 InOffsetUVs[STATIC_SAMPLE_COUNT] : TEXCOORD1,
#else
	noperspective float4 InOffsetUVs[PACKED_STATIC_SAMPLE_COUNT] : TEXCOORD1,
#endif
	out MaterialFloat4 OutColor : SV_Target0)
{
	float4 Color = 0;

#if USE_UNPACKED_UVS
	UNROLL for (int i = 0; i < STATIC_SAMPLE_COUNT; ++i)
	{
		Color += SampleFilterTexture(InOffsetUVs[i]) * SampleWeights[i];
	}
#else
	UNROLL for (int SampleIndex = 0; SampleIndex < STATIC_SAMPLE_COUNT - 1; SampleIndex += 2)
	{
		float4 UVUV = InOffsetUVs[SampleIndex / 2];
		Color += SampleFilterTexture(UVUV.xy) * SampleWeights[SampleIndex + 0];
		Color += SampleFilterTexture(UVUV.zw) * SampleWeights[SampleIndex + 1];
	}

	FLATTEN if (STATIC_SAMPLE_COUNT & 1)
	{
		float2 UV = InOffsetUVs[PACKED_STATIC_SAMPLE_COUNT - 1].xy;
		Color += SampleFilterTexture(UV) * SampleWeights[STATIC_SAMPLE_COUNT - 1];
	}
#endif

#if USE_COMBINE_ADDITIVE
	Color += SampleAdditiveTexture(InUV);
#endif

	OutColor = Color ;// (Luminance(Color) + 1.f) * BloomLuminance;
}

#endif

#if COMPUTESHADER

SCREEN_PASS_TEXTURE_VIEWPORT(Output)

RWTexture2D<float4> RWOutputTexture;

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	uint2 iPixelPos = DispatchThreadId + Output_ViewportMin;
	float2 PixelPos = float2(iPixelPos);
	float2 BaseUV = (PixelPos + 0.5) * Output_ExtentInverse;

	if (IsComputeUVOutOfBounds(BaseUV))
	{
		return;
	}

	float4 Color = 0;
	int SampleIndex = 0;

#if USE_DYNAMIC_LOOP
	LOOP for (; SampleIndex < SampleCount - 1; SampleIndex += 2)
#else
	UNROLL for (; SampleIndex < STATIC_SAMPLE_COUNT - 1; SampleIndex += 2)
#endif
	{
		float4 UVUV = BaseUV.xyxy + SampleOffsets[SampleIndex / 2];
		Color += SampleFilterTexture(UVUV.xy) * SampleWeights[SampleIndex + 0];
		Color += SampleFilterTexture(UVUV.zw) * SampleWeights[SampleIndex + 1];
	}

#if USE_DYNAMIC_LOOP
	BRANCH if (SampleIndex < SampleCount)
#else
	FLATTEN if (SampleIndex < STATIC_SAMPLE_COUNT)
#endif
	{
		float2 UV = BaseUV + SampleOffsets[SampleIndex / 2].xy;

		Color += SampleFilterTexture(UV) * SampleWeights[SampleIndex + 0];
	}

#if USE_COMBINE_ADDITIVE
	Color += SampleAdditiveTexture(BaseUV);
#endif

	RWOutputTexture[PixelPos] = Color;
}

#endif 