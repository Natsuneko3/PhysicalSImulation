#include  "/Engine/Private/Common.ush"
#include "ParticleCommon.ush"
Texture3D<float> Rasterize;
Texture2D Depth;
Buffer<uint> ParticleBuffer;
SamplerState DepthSampler;
float4x4 LocalToWorld;



//PrimaryView
void MainVS(in float4 InPosition : ATTRIBUTE0,
	in float4 InUV : ATTRIBUTE1,
	uint InstanceId : SV_InstanceID,
	out float4 OutPosition : SV_Position,
	out float2 UV : TEXCOORD0)
{
	float4 LocalPosition = InPosition * float4(100.0,100.0,100.0,1);

	//ParticleContext Context = GetParticle(ParticleBuffer,InstanceId);
	float4 World = mul(LocalPosition,LocalToWorld) ;//float4(Context.Position,0.0);
	uint Size;
	//ParticleBuffer.GetDimensions(Size);
	World += float4(ParticleBuffer[InstanceId].xxx,1);
	float4 ClipPos = mul(World , LWCHackToFloat(PrimaryView.WorldToClip));

	OutPosition = ClipPos;//mul(WorldPos,View.ClipToView);//mul(WorldPos, LWCHackToFloat(PrimaryView.WorldToClip));
	UV = InUV.xy;
}


float4 trace(float3 WorldPosition,float2 UV)
{
	float4 ret = {0, 0, 0, 0};
	float3 CameraDirectionVector = mul(float4(0,0,1,0),LWCHackToFloat(PrimaryView.ClipToWorld));
	float3 RayStart = LWCHackToFloat(PrimaryView.WorldCameraOrigin);
	float3 RayDir = normalize( WorldPosition - RayStart);
	float SceneDepth = ConvertFromDeviceZ( Depth.SampleLevel(DepthSampler,UV,0).x);
	float WorldDepth = SceneDepth / dot(RayDir, CameraDirectionVector);
	float3 WorldGridExtents = 100.0;
	float3 OriginalRayDir = RayDir;

	//
	//  Ray aabbox intersection
	//

	float3 dirfrac = 1.0f / RayDir;

	float t = 0;


	float3 MinBounds = -1. * WorldGridExtents * .5;
	float3 MaxBounds = WorldGridExtents * .5;
	float t1 = (MinBounds.x - RayStart.x) * dirfrac.x;
	float t2 = (MaxBounds.x - RayStart.x) * dirfrac.x;
	float t3 = (MinBounds.y - RayStart.y) * dirfrac.y;
	float t4 = (MaxBounds.y - RayStart.y) * dirfrac.y;
	float t5 = (MinBounds.z - RayStart.z) * dirfrac.z;
	float t6 = (MaxBounds.z - RayStart.z) * dirfrac.z;

	float tmin = max(max(min(t1, t2), min(t3, t4)), min(t5, t6));
	float tmax = min(min(max(t1, t2), max(t3, t4)), max(t5, t6));

	// if tmax < 0, ray (line) is intersecting AABB, but the whole AABB is behind us
	if (tmax < 0)
	{
		t = tmax;
		return ret;
	}

	// if tmin > tmax, ray doesn't intersect AABB
	if (tmin > tmax)
	{
		t = tmax;
		return ret;
	}

	t = max(0, tmin);

	float3 CurrLocalPos = RayStart + RayDir * t;

	float SignedDistance = -10000;
	float3 FinalPos = float3(0, 0, 0);
	float4 RetVal = float4(0, 0, 0, 0);
	float Whitewater = 0;
	float NumSteps = 32;
	for (int i = 0; i < NumSteps; ++i)
	{
		float3 Position = CurrLocalPos / WorldGridExtents + .5;
		float4 VolumeSample = Rasterize.SampleLevel(DepthSampler, Position, 0);
		//float4 VolumeSample = distance(Position,float3(0,0,0)).xxxx;
		SignedDistance = VolumeSample.r;
		if (abs(SignedDistance) >0.00001 && Position.x >= 0 && Position.x <= 1 && Position.y >= 0 && Position.y <= 1 && Position.z >= 0 && Position.z <= 1)
		{
			FinalPos = Position;
			RetVal = 1;//float4(normalize(VolumeSample.gba), 1);
			Whitewater = VolumeSample.g;
			//Depth = t * dot(OriginalRayDir, CameraDirectionVector);
			break;
		}

		t += SignedDistance;
		CurrLocalPos = RayStart + RayDir * t;
	}


	if (t > WorldDepth)
	{
		RetVal.a = 0;
	}

	/*
	if (RetVal.a != 0 && ComputeNormals > 1 - 1e-5)
	{
		uint sx, sy, sz, l;
		VolumeTexture.GetDimensions(0, sx, sy, sz, l);
		float3 UnitDx = 1. / float3(sx, sy, sz);

		float S_right = VolumeTexture.SampleLevel(VolumeTextureSampler, FinalPos + float3(1, 0, 0) * UnitDx, 0).r;
		float S_left = VolumeTexture.SampleLevel(VolumeTextureSampler, FinalPos -
		                                         float3(1, 0, 0) * UnitDx, 0).r;
		float S_up = VolumeTexture.SampleLevel(VolumeTextureSampler, FinalPos +
		                                       float3(0, 1, 0) * UnitDx, 0).r;
		float S_down = VolumeTexture.SampleLevel(VolumeTextureSampler, FinalPos - float3(0, 1, 0) * UnitDx, 0).r;
		float S_front = VolumeTexture.SampleLevel(VolumeTextureSampler, FinalPos + float3(0, 0, 1) * UnitDx, 0).r;
		float S_back = VolumeTexture.SampleLevel(VolumeTextureSampler, FinalPos - float3(0, 0, 1) * UnitDx, 0).r;

		RetVal.rgb = normalize(float3(S_right + S_left, S_up - S_down, S_front - S_back));
	}#1#*/

	return RetVal;
}

void MainPS(in float4 SvPosition : SV_POSITION,
	in float2 UV : TEXCOORD0,
	out float4 OutWorldNormal : SV_Target0)
{
	float2 SceneUV = SvPositionToBufferUV(SvPosition);//saturate(UV);
	float SceneDepth = ConvertFromDeviceZ(Depth.SampleBias(DepthSampler,SceneUV,0).x);//float4(UV,0,0);
	float VolumeSample = Rasterize.SampleLevel(DepthSampler, LWCHackToFloat(SvPositionToWorld(SvPosition)).xyz, 0).x;

	float4 Volume = trace(LWCHackToFloat(SvPositionToWorld(SvPosition)) ,SceneUV);
	OutWorldNormal = Volume;//SceneDepth > 10000? 0 : SceneDepth;
}

