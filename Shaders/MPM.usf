
//#include "/Engine/Private/ShaderPrint.ush"

#include "ParticleCommon.ush"

// Temporary buffer where we compute the number of elements to write before each input element.
groupshared uint GroupWriteOffsets[2*THREADGROUP_SIZEX];
// The offset where this thread group will start writing its output.
groupshared uint GroupWriteStart;

int ShaderType;
RWTexture3D<float> RasterizeTexture;
float GravityScale;
float LifeTime;
Buffer<uint> ParticleIDBufferSRV;
Buffer<float> ParticleAttributeBufferSRV;

void ParticleToCell(uint DispatchThreadId )
{
	/*ParticleContext Particle = GetParticle(DispatchThreadId);

	// if(Particle.Age == 0.0)
	// {
	// 	Particle = SpawnParticle(DispatchThreadId);
	// }
	OutPutParticle(DispatchThreadId,Particle);*/
}
void CellToParticle(uint DispatchThreadId )
{
	int active = 1;
	ParticleContext Particle = GetParticle(ParticleAttributeBufferSRV,DispatchThreadId);
	//GroupMemoryBarrierWithGroupSync();
	Particle.Velocity += float3(0,0,-9.8);
	Particle.Position += Particle.Velocity * dt;
	Particle.Age += dt;
	if(Particle.Age > LifeTime)
	{
		active = 0;
		int DeadNum = 0;
		InterlockedAdd(ParticleIDBuffer[0],1,DeadNum);
	}
	ParticleIDBuffer[DispatchThreadId + 1] = active;
	//OutPutParticle(DispatchThreadId,Particle);
}
void Rasterize(uint DispatchThreadId)
{
	ParticleContext Particle = GetParticle(DispatchThreadId);

	Particle.Velocity += float3(0,0,-9.8);
	Particle.Position += Particle.Velocity * dt;
	Particle.Age += dt;
	OutPutParticle(DispatchThreadId,Particle);
	float3 GridPosition = Particle.Position / (GridSize * dx);
	GridPosition = saturate(GridPosition) * GridSize;
	int Radius = 10;
	for(int x = -Radius; x < Radius;x++)
	{
		for(int y = -Radius; y < Radius;y++)
		{
			for(int z = -Radius; z < Radius;z++)
			{
				int3 Position = int3(GridPosition + int3(x,y,z));
				//InterlockedMax(RasterizeTexture[uint3(0,0,0)],1,original_value);//
				RasterizeTexture[uint3(Position)] = 1;
			}
		}
	}

	//RasterizeTexture[uint3(0,0,0)] = 1;
	//InterlockedMax(RasterizeTexture[int3(GridPosition)],asfloat(a));

}
[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void MainCS(uint DispatchThreadId : SV_DispatchThreadID, uint2 GroupThreadId : SV_GroupThreadID, uint2 GroupID:SV_GroupID)
{
	switch (ShaderType)
	{
	case P2G:
		ParticleToCell(DispatchThreadId);
		break;
	case  G2P:
		CellToParticle(DispatchThreadId);
		break;
	case RASTERIZE:
		Rasterize(DispatchThreadId);
		break;

	}

}
