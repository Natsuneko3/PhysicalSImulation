#define TWO_PI 6.28318530718

float2 Direction2D(float A) {
	float Angle = A * TWO_PI;
	return float2(cos(Angle), sin(Angle));
}

void MergeRays(inout float4 Near, in float4 Far) {
	Near.xyz += Near.w * Far.xyz;
	Near.w *= Far.w;
}

void RayTraceStep(
	in Texture2D<float4> Tex,
	in SamplerState Sampler,
	inout float4 Radiance,
	inout float2 Uv,
	in float2 Step
) {
	float4 PointRadiance = Tex.SampleLevel(Sampler, Uv, 0);

	PointRadiance.w = 1.0 - PointRadiance.w;

	MergeRays(Radiance, PointRadiance);

	Uv += Step;
}

float4 RayTrace(
	in Texture2D<float4> Tex,
	in SamplerState Sampler,
	float2 Uv,
	float2 Step,
	uint QuarterSampleCount
) {
	float4 Radiance = float4(0, 0, 0, 1);

	for (uint I = 0; I != QuarterSampleCount; ++I) {
		RayTraceStep(Tex, Sampler, Radiance, Uv, Step);
		RayTraceStep(Tex, Sampler, Radiance, Uv, Step);
		RayTraceStep(Tex, Sampler, Radiance, Uv, Step);
		RayTraceStep(Tex, Sampler, Radiance, Uv, Step);
	}

	return Radiance;
}

float4 BilinearInterpolation(
	in float4 RadianceLU,
	in float4 RadianceRU,
	in float4 RadianceLL,
	in float4 RadianceRL,
	in float2 Uv
) {
	float4 U4 = Uv.x;
	float4 V4 = Uv.y;
	return lerp(
		lerp(RadianceLL, RadianceRL, U4),
		lerp(RadianceLU, RadianceRU, U4),
		V4
	);
}

uint2 TexSize(in Texture2D<float4> Tex2D) {
	uint2 Size;
	Tex2D.GetDimensions(Size.x, Size.y);
	return Size;
}

uint2 TexSize(in RWTexture2D<float4> Tex2D) {
	uint2 Size;
	Tex2D.GetDimensions(Size.x, Size.y);
	return Size;
}

uint3 TexSize(in RWTexture3D<half4> Tex3D) {
	uint3 Size;
	Tex3D.GetDimensions(Size.x, Size.y, Size.z);
	return Size;
}
