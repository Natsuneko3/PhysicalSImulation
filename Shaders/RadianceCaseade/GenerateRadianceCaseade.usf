#include "/Engine/Private/SceneTexturesCommon.ush"
#include "/Engine/Private/ShaderPrint.ush"
#include "Common.ush"
RWTexture2DArray<float4> GenerateRadianceCaseadeUAV;
int3 GridSize;
int CascadeLevel;
int Step;

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void MainCS(uint2 DispatchThreadID : SV_DispatchThreadID,
	uint2 GroupThreadID : SV_GroupThreadID,
	uint2 GroupID : SV_GroupID,
	uint GroupIndex : SV_GroupIndex)
{

	FShaderPrintContext Context = InitShaderPrintContext(true, uint2(50,300));
	float2 ScreenSize = View.BufferSizeAndInvSize.xy;
	int2 ProbeID = flood(DispatchThreadID / ProbeInfo.RayNum[CascadeLevel]);
	float2 ProbeScenePosition = (ProbeID + 0.5) * ProbeInfo.ProbeIntervel[CascadeLevel];

	uint2 ProbeThreadID = DispatchThreadID % ProbeInfo.RayNum[CascadeLevel];

	float Angle =  float(ProbeThreadID.x + ProbeThreadID.y * RayNum) / (RayNum * RayNum);
	float2x2 RotateMatrix = {cos(Angle),-sin(Angle),
	sin(Angle),cos(Angle)};
	float2 RayDirector = mul(float2(0,1),RotateMatrix);
	float2 StratProbeRayUV = (ProbeScenePosition + ProbeInfo.Diagonal[CascadeLevel])* View.BufferSizeAndInvSize.zw;
	float CenterDepht = CalcSceneDepth(StratProbeRayUV);
	float tolerance = 100;
	float3 SampleSceneColor = 0;
	for(int i = 0;i<Step;i++)
	{
		StratProbeRayUV += RayDirector * ProbeInfo.Step[CascadeLevel] * View.BufferSizeAndInvSize.zw;
		float SampleDepth = CalcSceneDepth(StratProbeRayUV);
		if(abs(SampleDepth - CenterDepht) < tolerance)
		{
			SampleSceneColor = CalcSceneColor(StratProbeRayUV);
			break;
		}
	}
	GenerateRadianceCaseadeUAV[uint3(DispatchThreadID,CascadeLevel)] = float4(SampleSceneColor,1);
}